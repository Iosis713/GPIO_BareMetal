
GPIO_Output_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000160  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002f4  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  000012f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080002ec  080002ec  000012f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080002ec  080002f4  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000012ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002f0  080002f0  000012f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000012f4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000471  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001b3  00000000  00000000  00001795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00000030  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000058  00000000  00000000  00001978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000050  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c63c  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000005b9  00000000  00000000  0001e05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009f2eb  00000000  00000000  0001e615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000bd900  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000074  00000000  00000000  000bd944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  000bd9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080002d4 	.word	0x080002d4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	080002d4 	.word	0x080002d4

080001cc <_Z12ConfigureLD2v>:

void ConfigureLD2()
{
	//Reference Manual - Reset and clock control RCC
	//RCC->AHB2ENR |= (1<<0);
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; //enable clock for GPIOA
 80001cc:	490d      	ldr	r1, [pc, #52]	@ (8000204 <_Z12ConfigureLD2v+0x38>)
 80001ce:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
	//GPIO registers
	//GPIOx_MODER - port mode register
	GPIOA->MODER |= GPIO_MODER_MODE5_0; //1
 80001d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; //enable clock for GPIOA
 80001d4:	f042 0201 	orr.w	r2, r2, #1
 80001d8:	64ca      	str	r2, [r1, #76]	@ 0x4c
	GPIOA->MODER |= GPIO_MODER_MODE5_0; //1
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80001e0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1); //0
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80001e8:	601a      	str	r2, [r3, #0]
	//output type register -  OTYPER
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5); //bit 5, value 0
 80001ea:	685a      	ldr	r2, [r3, #4]
 80001ec:	f022 0220 	bic.w	r2, r2, #32
 80001f0:	605a      	str	r2, [r3, #4]
	//OSPEEDR how fast the edge rises
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);
 80001f2:	689a      	ldr	r2, [r3, #8]
 80001f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80001f8:	609a      	str	r2, [r3, #8]
	//PUPDR pull-up pull-down register
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5); //00 -no pull up/no pull down
 80001fa:	68da      	ldr	r2, [r3, #12]
 80001fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8000200:	60da      	str	r2, [r3, #12]
										 //10 - pull down
										 //would be like this?
	//GPIOA->PUPDR |= GPIO_PUPDR_PUPD5_0;
	//GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5_1);
}
 8000202:	4770      	bx	lr
 8000204:	40021000 	.word	0x40021000

08000208 <main>:
{
 8000208:	b508      	push	{r3, lr}
	ConfigureLD2();
 800020a:	f7ff ffdf 	bl	80001cc <_Z12ConfigureLD2v>
void inline LD2on() { GPIOA->BSRR |= GPIO_BSRR_BS5; };
 800020e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000212:	6991      	ldr	r1, [r2, #24]
 8000214:	4b07      	ldr	r3, [pc, #28]	@ (8000234 <main+0x2c>)
 8000216:	f041 0120 	orr.w	r1, r1, #32
 800021a:	6191      	str	r1, [r2, #24]

void PrimitiveDelay()
{
	for (uint32_t i = 0; i < 100000; i++)
	{
		__asm__ volatile("nop");
 800021c:	bf00      	nop
	for (uint32_t i = 0; i < 100000; i++)
 800021e:	3b01      	subs	r3, #1
 8000220:	d1fc      	bne.n	800021c <main+0x14>
void inline LD2off() { GPIOA->BSRR |= GPIO_BSRR_BR5; };
 8000222:	6991      	ldr	r1, [r2, #24]
 8000224:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <main+0x2c>)
 8000226:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 800022a:	6191      	str	r1, [r2, #24]
		__asm__ volatile("nop");
 800022c:	bf00      	nop
	for (uint32_t i = 0; i < 100000; i++)
 800022e:	3b01      	subs	r3, #1
 8000230:	d1fc      	bne.n	800022c <main+0x24>
 8000232:	e7ee      	b.n	8000212 <main+0xa>
 8000234:	000186a0 	.word	0x000186a0

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	@ (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800023c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	@ (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	@ (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	@ (800027c <LoopForever+0xe>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	@ (8000284 <LoopForever+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ffcd 	bl	8000208 <main>

0800026e <LoopForever>:

LoopForever:
  b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	4d0d      	ldr	r5, [pc, #52]	@ (80002c4 <__libc_init_array+0x38>)
 8000290:	4c0d      	ldr	r4, [pc, #52]	@ (80002c8 <__libc_init_array+0x3c>)
 8000292:	1b64      	subs	r4, r4, r5
 8000294:	10a4      	asrs	r4, r4, #2
 8000296:	2600      	movs	r6, #0
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	4d0b      	ldr	r5, [pc, #44]	@ (80002cc <__libc_init_array+0x40>)
 800029e:	4c0c      	ldr	r4, [pc, #48]	@ (80002d0 <__libc_init_array+0x44>)
 80002a0:	f000 f818 	bl	80002d4 <_init>
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	10a4      	asrs	r4, r4, #2
 80002a8:	2600      	movs	r6, #0
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
