
GPIO_Output_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000018c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00001320  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000318  08000318  00001320  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000318  08000320  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00001318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800031c  0800031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001320  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000256b  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006cc  00000000  00000000  000038bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000016e  00000000  00000000  00003f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  000040f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000093  00000000  00000000  00004160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000040d  00000000  00000000  000041f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000e12  00000000  00000000  00004600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a4dc7  00000000  00000000  00005412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000aa1d9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000008c  00000000  00000000  000aa21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000079  00000000  00000000  000aa2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000300 	.word	0x08000300

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000300 	.word	0x08000300

080001cc <main>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d0:	491b      	ldr	r1, [pc, #108]	@ (8000240 <main+0x74>)

public:
	void EnableClock()
	{
		if (Derived::portAddr == GPIOA_BASE)
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000244 <main+0x78>)
 80001d4:	20f0      	movs	r0, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001d6:	f640 749f 	movw	r4, #3999	@ 0xf9f
 80001da:	615c      	str	r4, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001dc:	f881 0023 	strb.w	r0, [r1, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001e2:	2107      	movs	r1, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001e4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001e6:	6119      	str	r1, [r3, #16]
 80001e8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80001ea:	4917      	ldr	r1, [pc, #92]	@ (8000248 <main+0x7c>)
		// GPIOx_MODER (GPIO port mode register) controls the mode of each pin.
		// 00 = Input mode
		// 01 = General purpose output mode
		// 10 = Alternate function mode
		// 11 = Analog mode (reset state)
		port->MODER &= ~MODER_MASKS[pin];
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
		port->MODER &= ~MODER_MASKS[pin];
 80001f6:	6803      	ldr	r3, [r0, #0]
 80001f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001fc:	6003      	str	r3, [r0, #0]
		port->MODER |= MODER_OUTPUT_BITS[pin];
 80001fe:	6803      	ldr	r3, [r0, #0]
 8000200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000204:	6003      	str	r3, [r0, #0]

		// GPIOx_OTYPER (GPIO port output type register):
		// 0 = Output push-pull (reset state)
		// 1 = Output open-drain
		port->OTYPER &= ~OTYPER_BITS[pin];
 8000206:	6843      	ldr	r3, [r0, #4]
 8000208:	f023 0320 	bic.w	r3, r3, #32
 800020c:	6043      	str	r3, [r0, #4]
		// GPIOx_OSPEEDR (GPIO port output speed register):
		// 00 = Low speed (reset value)
		// 01 = Medium speed
		// 10 = High speed
		// 11 = Very high speed
		port->OSPEEDR &= ~OSPEEDR_MASKS[pin];
 800020e:	6883      	ldr	r3, [r0, #8]
 8000210:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000214:	6083      	str	r3, [r0, #8]

	    // 00 = No pull-up, no pull-down
	    // 01 = Pull-up
	    // 10 = Pull-down
	    // 11 = Reserved
		port->PUPDR &= ~PUPDR_MASKS[pin];
 8000216:	68c3      	ldr	r3, [r0, #12]
 8000218:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800021c:	60c3      	str	r3, [r0, #12]
		ConfigureAsOutput();
	}
	~GpioOutput() = default;


	bool IsPinSet() const { return this->Port()->ODR & PinMask<pin>(); }
 800021e:	6943      	ldr	r3, [r0, #20]
	void SetImpl() { this->Port()->BSRR |= BSRR_BS_MASKS[pin]; }
	void ClearImpl() { this->Port()->BSRR |= BSRR_BR_MASKS[pin]; }
	void ToggleImpl()
	{
		//should be refactored and checked what ODR means. And applied in a way that Set/Clear is implemented
		if (IsPinSet())
 8000220:	f013 0f20 	tst.w	r3, #32
	void ClearImpl() { this->Port()->BSRR |= BSRR_BR_MASKS[pin]; }
 8000224:	6983      	ldr	r3, [r0, #24]
 8000226:	bf14      	ite	ne
 8000228:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
	void SetImpl() { this->Port()->BSRR |= BSRR_BS_MASKS[pin]; }
 800022c:	f043 0320 	orreq.w	r3, r3, #32
 8000230:	6183      	str	r3, [r0, #24]
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8000232:	680a      	ldr	r2, [r1, #0]

void Delay(const uint32_t delay)
{
	const uint32_t startTime = Tick.load(std::memory_order_relaxed);

	while(Tick.load(std::memory_order_relaxed) < startTime + delay)
 8000234:	f502 72c8 	add.w	r2, r2, #400	@ 0x190
 8000238:	680b      	ldr	r3, [r1, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d8fc      	bhi.n	8000238 <main+0x6c>
 800023e:	e7ee      	b.n	800021e <main+0x52>
 8000240:	e000ed00 	.word	0xe000ed00
 8000244:	40021000 	.word	0x40021000
 8000248:	2000001c 	.word	0x2000001c

0800024c <SysTick_Handler>:
#endif // __cpp_lib_atomic_wait

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
 800024c:	4b04      	ldr	r3, [pc, #16]	@ (8000260 <SysTick_Handler+0x14>)
 800024e:	e853 1f00 	ldrex	r1, [r3]
 8000252:	3101      	adds	r1, #1
 8000254:	e843 1200 	strex	r2, r1, [r3]
 8000258:	2a00      	cmp	r2, #0
 800025a:	d1f8      	bne.n	800024e <SysTick_Handler+0x2>
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	2000001c 	.word	0x2000001c

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	@ (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	@ (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	@ (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	@ (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	@ (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ff99 	bl	80001cc <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	20000020 	.word	0x20000020

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	4d0d      	ldr	r5, [pc, #52]	@ (80002f0 <__libc_init_array+0x38>)
 80002bc:	4c0d      	ldr	r4, [pc, #52]	@ (80002f4 <__libc_init_array+0x3c>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	2600      	movs	r6, #0
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	4d0b      	ldr	r5, [pc, #44]	@ (80002f8 <__libc_init_array+0x40>)
 80002ca:	4c0c      	ldr	r4, [pc, #48]	@ (80002fc <__libc_init_array+0x44>)
 80002cc:	f000 f818 	bl	8000300 <_init>
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	2600      	movs	r6, #0
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
