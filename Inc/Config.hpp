/*
 * config.hpp
 *
 *  Created on: May 22, 2025
 *      Author: bartoszlozinski
 */

#pragma once

#ifdef UNIT_TESTS
#include "../UnitTests/Fake_stm32l476xx.h"
#include "../UnitTests/Fake_stm32l4xx.h"
#else
#include <stm32l4xx.h>
#include "stm32l476xx.h"
#endif

#include <array>
#include <cstdint>
#include <atomic>

#ifndef CONFIG_HPP_
#define CONFIG_HPP_

enum class ERROR_CODE
{
	OK = 0,
	NOK = 1,
};

static constexpr std::array<uint32_t, 16> BSRR_BS_MASKS = {
	GPIO_BSRR_BS0, GPIO_BSRR_BS1, GPIO_BSRR_BS2, GPIO_BSRR_BS3,
	GPIO_BSRR_BS4, GPIO_BSRR_BS5, GPIO_BSRR_BS6, GPIO_BSRR_BS7,
	GPIO_BSRR_BS8, GPIO_BSRR_BS9, GPIO_BSRR_BS10, GPIO_BSRR_BS11,
	GPIO_BSRR_BS12, GPIO_BSRR_BS13, GPIO_BSRR_BS14, GPIO_BSRR_BS15
};

static constexpr std::array<uint32_t, 16> BSRR_BR_MASKS = {
	GPIO_BSRR_BR0, GPIO_BSRR_BR1, GPIO_BSRR_BR2, GPIO_BSRR_BR3,
	GPIO_BSRR_BR4, GPIO_BSRR_BR5, GPIO_BSRR_BR6, GPIO_BSRR_BR7,
	GPIO_BSRR_BR8, GPIO_BSRR_BR9, GPIO_BSRR_BR10, GPIO_BSRR_BR11,
	GPIO_BSRR_BR12, GPIO_BSRR_BR13, GPIO_BSRR_BS14, GPIO_BSRR_BR15
};

//Output data register ODR - reference manual 8.5.6
static constexpr std::array<uint16_t, 16> ODR_OD_MASKS = {
	GPIO_ODR_OD0, GPIO_ODR_OD1, GPIO_ODR_OD2, GPIO_ODR_OD3,
	GPIO_ODR_OD4, GPIO_ODR_OD5, GPIO_ODR_OD6, GPIO_ODR_OD7,
	GPIO_ODR_OD8, GPIO_ODR_OD9, GPIO_ODR_OD10, GPIO_ODR_OD11,
	GPIO_ODR_OD12, GPIO_ODR_OD13, GPIO_ODR_OD14, GPIO_ODR_OD15
};

//RM 8.5.12 GPIO port analog switch control register: 0 - disconnect analog switch to the adc input (reset state), 1 - connect
static constexpr std::array<uint32_t, 16> GPIO_ASCR_ASC = {
	GPIO_ASCR_ASC0, GPIO_ASCR_ASC1, GPIO_ASCR_ASC2, GPIO_ASCR_ASC3, GPIO_ASCR_ASC4, GPIO_ASCR_ASC5, GPIO_ASCR_ASC6, GPIO_ASCR_ASC7,
	GPIO_ASCR_ASC8, GPIO_ASCR_ASC9, GPIO_ASCR_ASC10, GPIO_ASCR_ASC11, GPIO_ASCR_ASC12, GPIO_ASCR_ASC13, GPIO_ASCR_ASC14, GPIO_ASCR_ASC15
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI = {
	SYSCFG_EXTICR1_EXTI0, SYSCFG_EXTICR1_EXTI1, SYSCFG_EXTICR1_EXTI2, SYSCFG_EXTICR1_EXTI3,
	SYSCFG_EXTICR2_EXTI4, SYSCFG_EXTICR2_EXTI5, SYSCFG_EXTICR2_EXTI6, SYSCFG_EXTICR2_EXTI7,
	SYSCFG_EXTICR3_EXTI8, SYSCFG_EXTICR3_EXTI9, SYSCFG_EXTICR3_EXTI10, SYSCFG_EXTICR3_EXTI11,
	SYSCFG_EXTICR4_EXTI12, SYSCFG_EXTICR4_EXTI13, SYSCFG_EXTICR4_EXTI14, SYSCFG_EXTICR4_EXTI15
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI_PA = {
	SYSCFG_EXTICR1_EXTI0_PA, SYSCFG_EXTICR1_EXTI1_PA, SYSCFG_EXTICR1_EXTI2_PA, SYSCFG_EXTICR1_EXTI3_PA,
	SYSCFG_EXTICR2_EXTI4_PA, SYSCFG_EXTICR2_EXTI5_PA, SYSCFG_EXTICR2_EXTI6_PA, SYSCFG_EXTICR2_EXTI7_PA,
	SYSCFG_EXTICR3_EXTI8_PA, SYSCFG_EXTICR3_EXTI9_PA, SYSCFG_EXTICR3_EXTI10_PA, SYSCFG_EXTICR3_EXTI11_PA,
	SYSCFG_EXTICR4_EXTI12_PA, SYSCFG_EXTICR4_EXTI13_PA, SYSCFG_EXTICR4_EXTI14_PA, SYSCFG_EXTICR4_EXTI15_PA
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI_PB = {
	SYSCFG_EXTICR1_EXTI0_PB, SYSCFG_EXTICR1_EXTI1_PB, SYSCFG_EXTICR1_EXTI2_PB, SYSCFG_EXTICR1_EXTI3_PB,
	SYSCFG_EXTICR2_EXTI4_PB, SYSCFG_EXTICR2_EXTI5_PB, SYSCFG_EXTICR2_EXTI6_PB, SYSCFG_EXTICR2_EXTI7_PB,
	SYSCFG_EXTICR3_EXTI8_PB, SYSCFG_EXTICR3_EXTI9_PB, SYSCFG_EXTICR3_EXTI10_PB, SYSCFG_EXTICR3_EXTI11_PB,
	SYSCFG_EXTICR4_EXTI12_PB, SYSCFG_EXTICR4_EXTI13_PB, SYSCFG_EXTICR4_EXTI14_PB, SYSCFG_EXTICR4_EXTI15_PB
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI_PC = {
	SYSCFG_EXTICR1_EXTI0_PC, SYSCFG_EXTICR1_EXTI1_PC, SYSCFG_EXTICR1_EXTI2_PC, SYSCFG_EXTICR1_EXTI3_PC,
	SYSCFG_EXTICR2_EXTI4_PC, SYSCFG_EXTICR2_EXTI5_PC, SYSCFG_EXTICR2_EXTI6_PC, SYSCFG_EXTICR2_EXTI7_PC,
	SYSCFG_EXTICR3_EXTI8_PC, SYSCFG_EXTICR3_EXTI9_PC, SYSCFG_EXTICR3_EXTI10_PC, SYSCFG_EXTICR3_EXTI11_PC,
	SYSCFG_EXTICR4_EXTI12_PC, SYSCFG_EXTICR4_EXTI13_PC, SYSCFG_EXTICR4_EXTI14_PC, SYSCFG_EXTICR4_EXTI15_PC
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI_PD = {
	SYSCFG_EXTICR1_EXTI0_PD, SYSCFG_EXTICR1_EXTI1_PD, SYSCFG_EXTICR1_EXTI2_PD, SYSCFG_EXTICR1_EXTI3_PD,
	SYSCFG_EXTICR2_EXTI4_PD, SYSCFG_EXTICR2_EXTI5_PD, SYSCFG_EXTICR2_EXTI6_PD, SYSCFG_EXTICR2_EXTI7_PD,
	SYSCFG_EXTICR3_EXTI8_PD, SYSCFG_EXTICR3_EXTI9_PD, SYSCFG_EXTICR3_EXTI10_PD, SYSCFG_EXTICR3_EXTI11_PD,
	SYSCFG_EXTICR4_EXTI12_PD, SYSCFG_EXTICR4_EXTI13_PD, SYSCFG_EXTICR4_EXTI14_PD, SYSCFG_EXTICR4_EXTI15_PD
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI_PE = {
	SYSCFG_EXTICR1_EXTI0_PE, SYSCFG_EXTICR1_EXTI1_PE, SYSCFG_EXTICR1_EXTI2_PE, SYSCFG_EXTICR1_EXTI3_PE,
	SYSCFG_EXTICR2_EXTI4_PE, SYSCFG_EXTICR2_EXTI5_PE, SYSCFG_EXTICR2_EXTI6_PE, SYSCFG_EXTICR2_EXTI7_PE,
	SYSCFG_EXTICR3_EXTI8_PE, SYSCFG_EXTICR3_EXTI9_PE, SYSCFG_EXTICR3_EXTI10_PE, SYSCFG_EXTICR3_EXTI11_PE,
	SYSCFG_EXTICR4_EXTI12_PE, SYSCFG_EXTICR4_EXTI13_PE, SYSCFG_EXTICR4_EXTI14_PE, SYSCFG_EXTICR4_EXTI15_PE
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI_PF = {
	SYSCFG_EXTICR1_EXTI0_PF, SYSCFG_EXTICR1_EXTI1_PF, SYSCFG_EXTICR1_EXTI2_PF, SYSCFG_EXTICR1_EXTI3_PF,
	SYSCFG_EXTICR2_EXTI4_PF, SYSCFG_EXTICR2_EXTI5_PF, SYSCFG_EXTICR2_EXTI6_PF, SYSCFG_EXTICR2_EXTI7_PF,
	SYSCFG_EXTICR3_EXTI8_PF, SYSCFG_EXTICR3_EXTI9_PF, SYSCFG_EXTICR3_EXTI10_PF, SYSCFG_EXTICR3_EXTI11_PF,
	SYSCFG_EXTICR4_EXTI12_PF, SYSCFG_EXTICR4_EXTI13_PF, SYSCFG_EXTICR4_EXTI14_PF, SYSCFG_EXTICR4_EXTI15_PF
};

static constexpr std::array<uint32_t, 16> SYSCFG_EXTI_PG = {
	SYSCFG_EXTICR1_EXTI0_PG, SYSCFG_EXTICR1_EXTI1_PG, SYSCFG_EXTICR1_EXTI2_PG, SYSCFG_EXTICR1_EXTI3_PG,
	SYSCFG_EXTICR2_EXTI4_PG, SYSCFG_EXTICR2_EXTI5_PG, SYSCFG_EXTICR2_EXTI6_PG, SYSCFG_EXTICR2_EXTI7_PG,
	SYSCFG_EXTICR3_EXTI8_PG, SYSCFG_EXTICR3_EXTI9_PG, SYSCFG_EXTICR3_EXTI10_PG, SYSCFG_EXTICR3_EXTI11_PG,
	SYSCFG_EXTICR4_EXTI12_PG, SYSCFG_EXTICR4_EXTI13_PG, SYSCFG_EXTICR4_EXTI14_PG, SYSCFG_EXTICR4_EXTI15_PG
};

//RM 14.5.3 rising trigger selection register
static constexpr std::array<uint32_t, 16> EXTI_RTSR1_RT = {
	EXTI_RTSR1_RT0, EXTI_RTSR1_RT1, EXTI_RTSR1_RT2, EXTI_RTSR1_RT3, EXTI_RTSR1_RT4, EXTI_RTSR1_RT5, EXTI_RTSR1_RT6, EXTI_RTSR1_RT7,
	EXTI_RTSR1_RT8, EXTI_RTSR1_RT9, EXTI_RTSR1_RT10, EXTI_RTSR1_RT11, EXTI_RTSR1_RT12, EXTI_RTSR1_RT13, EXTI_RTSR1_RT14, EXTI_RTSR1_RT15
};

//RM 14.5.4 falling trigger selection register
static constexpr std::array<uint32_t, 16> EXTI_FTSR1_FT = {
	EXTI_FTSR1_FT0, EXTI_FTSR1_FT1, EXTI_FTSR1_FT2, EXTI_FTSR1_FT3, EXTI_FTSR1_FT4, EXTI_FTSR1_FT5, EXTI_FTSR1_FT6, EXTI_FTSR1_FT7,
	EXTI_FTSR1_FT8, EXTI_FTSR1_FT9, EXTI_FTSR1_FT10, EXTI_FTSR1_FT11, EXTI_FTSR1_FT12, EXTI_FTSR1_FT13, EXTI_FTSR1_FT14, EXTI_FTSR1_FT15
};

//RM14.5.1 Interrupt mask register IMR - if masked, interrupt is treaded like it does not exist
//Bits 0 - 15 are by default 0
static constexpr std::array<uint32_t, 16> EXTI_IMR1 = {
	EXTI_IMR1_IM0, EXTI_IMR1_IM1, EXTI_IMR1_IM2, EXTI_IMR1_IM3, EXTI_IMR1_IM4, EXTI_IMR1_IM5, EXTI_IMR1_IM6, EXTI_IMR1_IM7,
	EXTI_IMR1_IM8, EXTI_IMR1_IM9, EXTI_IMR1_IM10, EXTI_IMR1_IM11, EXTI_IMR1_IM12, EXTI_IMR1_IM13, EXTI_IMR1_IM14, EXTI_IMR1_IM15
};

//which interrupt: status registers in RM 14.5.6 Pending register
//PIFx --> rc_w1 - read/clear with 1 - used 1 to read and clear interrupt state
static constexpr std::array<uint32_t, 16> EXTI_PR1_PIF = {
	EXTI_PR1_PIF0, EXTI_PR1_PIF1, EXTI_PR1_PIF2, EXTI_PR1_PIF3, EXTI_PR1_PIF4, EXTI_PR1_PIF5,EXTI_PR1_PIF6, EXTI_PR1_PIF7,
	EXTI_PR1_PIF8, EXTI_PR1_PIF9, EXTI_PR1_PIF10, EXTI_PR1_PIF11, EXTI_PR1_PIF12, EXTI_PR1_PIF13, EXTI_PR1_PIF14, EXTI_PR1_PIF15
};

static constexpr std::array<uint16_t, 16> ADC_SQR_SQ = {
	ADC_SQR1_SQ1_Pos, ADC_SQR1_SQ2_Pos, ADC_SQR1_SQ3_Pos, ADC_SQR1_SQ4_Pos,
	ADC_SQR2_SQ5_Pos, ADC_SQR2_SQ6_Pos, ADC_SQR2_SQ7_Pos, ADC_SQR2_SQ8_Pos, ADC_SQR2_SQ9_Pos,
	ADC_SQR3_SQ10_Pos, ADC_SQR3_SQ11_Pos, ADC_SQR3_SQ12_Pos, ADC_SQR3_SQ13_Pos, ADC_SQR3_SQ14_Pos,
	ADC_SQR4_SQ15_Pos, ADC_SQR4_SQ16_Pos
};

static constexpr std::array<uint16_t, 18> ADC_SMPR_SMP = {
	ADC_SMPR1_SMP1_Pos, ADC_SMPR1_SMP2_Pos, ADC_SMPR1_SMP3_Pos, ADC_SMPR1_SMP4_Pos, ADC_SMPR1_SMP5_Pos, ADC_SMPR1_SMP6_Pos, ADC_SMPR1_SMP7_Pos, ADC_SMPR1_SMP8_Pos, ADC_SMPR1_SMP9_Pos,
	ADC_SMPR2_SMP10_Pos, ADC_SMPR2_SMP11_Pos, ADC_SMPR2_SMP12_Pos, ADC_SMPR2_SMP13_Pos, ADC_SMPR2_SMP14_Pos, ADC_SMPR2_SMP15_Pos, ADC_SMPR2_SMP16_Pos, ADC_SMPR2_SMP17_Pos, ADC_SMPR2_SMP18_Pos
};

template<int pin>
constexpr uint32_t PinMask()
{
	static_assert(pin >= 0 && pin < 16, "Pin mask should use pin value in range of 0 - 15!");
	return 1u << pin;
}

#endif /* CONFIG_HPP_ */
