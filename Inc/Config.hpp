/*
 * config.hpp
 *
 *  Created on: May 22, 2025
 *      Author: bartoszlozinski
 */

#include <array>
#include <cstdint>
#include "main.h"

#ifndef CONFIG_HPP_
#define CONFIG_HPP_

static constexpr std::array<uint32_t, 16> MODER_MASKS = {
	GPIO_MODER_MODE0,  GPIO_MODER_MODE1,  GPIO_MODER_MODE2,  GPIO_MODER_MODE3,
	GPIO_MODER_MODE4,  GPIO_MODER_MODE5,  GPIO_MODER_MODE6,  GPIO_MODER_MODE7,
	GPIO_MODER_MODE8,  GPIO_MODER_MODE9,  GPIO_MODER_MODE10, GPIO_MODER_MODE11,
	GPIO_MODER_MODE12, GPIO_MODER_MODE13, GPIO_MODER_MODE14, GPIO_MODER_MODE15
};

static constexpr std::array<uint32_t, 16> MODER_OUTPUT_BITS = {
	GPIO_MODER_MODE0_0,  GPIO_MODER_MODE1_0,  GPIO_MODER_MODE2_0,  GPIO_MODER_MODE3_0,
	GPIO_MODER_MODE4_0,  GPIO_MODER_MODE5_0,  GPIO_MODER_MODE6_0,  GPIO_MODER_MODE7_0,
	GPIO_MODER_MODE8_0,  GPIO_MODER_MODE9_0,  GPIO_MODER_MODE10_0, GPIO_MODER_MODE11_0,
	GPIO_MODER_MODE12_0, GPIO_MODER_MODE13_0, GPIO_MODER_MODE14_0, GPIO_MODER_MODE15_0
};
static constexpr std::array<uint32_t, 16> OTYPER_BITS = {
	GPIO_OTYPER_OT0,  GPIO_OTYPER_OT1,  GPIO_OTYPER_OT2,  GPIO_OTYPER_OT3,
	GPIO_OTYPER_OT4,  GPIO_OTYPER_OT5,  GPIO_OTYPER_OT6,  GPIO_OTYPER_OT7,
	GPIO_OTYPER_OT8,  GPIO_OTYPER_OT9,  GPIO_OTYPER_OT10, GPIO_OTYPER_OT11,
	GPIO_OTYPER_OT12, GPIO_OTYPER_OT13, GPIO_OTYPER_OT14, GPIO_OTYPER_OT15
};

static constexpr std::array<uint32_t, 16> OSPEEDR_MASKS = {
	GPIO_OSPEEDR_OSPEED0,  GPIO_OSPEEDR_OSPEED1,  GPIO_OSPEEDR_OSPEED2,  GPIO_OSPEEDR_OSPEED3,
	GPIO_OSPEEDR_OSPEED4,  GPIO_OSPEEDR_OSPEED5,  GPIO_OSPEEDR_OSPEED6,  GPIO_OSPEEDR_OSPEED7,
	GPIO_OSPEEDR_OSPEED8,  GPIO_OSPEEDR_OSPEED9,  GPIO_OSPEEDR_OSPEED10, GPIO_OSPEEDR_OSPEED11,
	GPIO_OSPEEDR_OSPEED12, GPIO_OSPEEDR_OSPEED13, GPIO_OSPEEDR_OSPEED14, GPIO_OSPEEDR_OSPEED15
};

static constexpr std::array<uint32_t, 16> PUPDR_MASKS = {
	GPIO_PUPDR_PUPD0,  GPIO_PUPDR_PUPD1,  GPIO_PUPDR_PUPD2,  GPIO_PUPDR_PUPD3,
	GPIO_PUPDR_PUPD4,  GPIO_PUPDR_PUPD5,  GPIO_PUPDR_PUPD6,  GPIO_PUPDR_PUPD7,
	GPIO_PUPDR_PUPD8,  GPIO_PUPDR_PUPD9,  GPIO_PUPDR_PUPD10, GPIO_PUPDR_PUPD11,
	GPIO_PUPDR_PUPD12, GPIO_PUPDR_PUPD13, GPIO_PUPDR_PUPD14, GPIO_PUPDR_PUPD15
};

static constexpr std::array<uint32_t, 16> BSRR_BS_MASKS = {
	GPIO_BSRR_BS0, GPIO_BSRR_BS1, GPIO_BSRR_BS2, GPIO_BSRR_BS3,
	GPIO_BSRR_BS4, GPIO_BSRR_BS5, GPIO_BSRR_BS6, GPIO_BSRR_BS7,
	GPIO_BSRR_BS8, GPIO_BSRR_BS9, GPIO_BSRR_BS10, GPIO_BSRR_BS11,
	GPIO_BSRR_BS12, GPIO_BSRR_BS13, GPIO_BSRR_BS14, GPIO_BSRR_BS15
};

static constexpr std::array<uint32_t, 16> BSRR_BR_MASKS = {
	GPIO_BSRR_BR0, GPIO_BSRR_BR1, GPIO_BSRR_BR2, GPIO_BSRR_BR3,
	GPIO_BSRR_BR4, GPIO_BSRR_BR5, GPIO_BSRR_BR6, GPIO_BSRR_BR7,
	GPIO_BSRR_BR8, GPIO_BSRR_BR9, GPIO_BSRR_BR10, GPIO_BSRR_BR11,
	GPIO_BSRR_BR12, GPIO_BSRR_BR13, GPIO_BSRR_BS14, GPIO_BSRR_BR15
};

static constexpr std::array<uint16_t, 16> ODR_OD_MASKS = {
	GPIO_ODR_OD0, GPIO_ODR_OD1, GPIO_ODR_OD2, GPIO_ODR_OD3,
	GPIO_ODR_OD4, GPIO_ODR_OD5, GPIO_ODR_OD6, GPIO_ODR_OD7,
	GPIO_ODR_OD8, GPIO_ODR_OD9, GPIO_ODR_OD10, GPIO_ODR_OD11,
	GPIO_ODR_OD12, GPIO_ODR_OD13, GPIO_ODR_OD14, GPIO_ODR_OD15
};

template<int pin>
constexpr uint32_t PinMask()
{
	static_assert(pin >= 0 && pin < 16, "Pin mask should use pin value in range of 0 - 15!");
	return 1u << pin;
}

#endif /* CONFIG_HPP_ */
