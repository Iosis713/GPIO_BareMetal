/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "../Inc/Gpio.hpp"
#include "../Inc/Button.hpp"
#include "../Inc/Timer.hpp"
#include "../Inc/Uart.hpp"
#include "../Inc/Config.hpp"
#include "../Inc/Pwm.hpp"
#include <stdio.h>
#include <cstring>

//drivers/cmsis/include/core_cm0plus////systick_config - method
//To Cortex system timer - in hal clock config

void ConfigurationButtonEXTI();
//from startup file
extern "C" void TIM3_IRQHandler(void);

GpioOutput<GPIOA_BASE, 5> ld2;
UART2<115200, 80> uart2;
PWM<TIM3_BASE, (4 - 1), (1000 - 1)> pwmTim3(1);
PWMChannel<GPIOA_BASE, 6, 1> channel1(pwmTim3.Tim());

int main(void)
{
	SystemTimer::Init(4000);
	Button<GPIOC_BASE, 13, OptionsPUPDR::PullUp> userButton;
	ConfigurationButtonEXTI();
	Timer timerPWM(10);

	uart2.ConfigureExtiReceive();
	while (true)
	{

		if (uart2.GetStringIT() == ERROR_CODE::OK)
		{
			uart2.SendString(uart2.GetBuffer().data());

			if (strcmp(uart2.GetBuffer().data(), "set") == 0)
				ld2.Set();
			else if (strcmp(uart2.GetBuffer().data(), "clear") == 0)
				ld2.Clear();
			else if (strcmp(uart2.GetBuffer().data(), "toggle") == 0)
				ld2.Toggle();

			uart2.ClearBuffer();
		}

		if (timerPWM.IsExpired())
		{
			if (channel1.GetPulse_CH1() < pwmTim3.GetMaxWidth() - 1)
				channel1.SetPulse_CH1(channel1.GetPulse_CH1() + 5);
			else
				channel1.SetPulse_CH1(0);
		}
	}
}

//RM EXTI
//RM External iterrupt/event GPIO Mapping (multiplexer)
//For single exti only single port
//I.e interrupt for PC13 cannot be set for PA13 at the same time
void ConfigurationButtonEXTI()
{
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; //enable SYSCFG clock
	//9.2.6 System configuration controller SYSCFG
	SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13; //0000
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC; //set bit for PC13 exti route to syscfg

	//falling edge -> button normally opened -> high state
	//falls frop high state to low, when button is pressed
	EXTI->FTSR1 |= EXTI_FTSR1_FT13; //reference manual 14.5.3 Rising trigger selection register

	EXTI->IMR1 |= EXTI_IMR1_IM13;//unmasked
	//Interrupt mask register IMR
	//masked thing is treated as it does not exist

	//interrupt priority
	//enum from stm32l476xx.h (CMSIS file) - Interrupt number definition
	NVIC_SetPriority(EXTI15_10_IRQn, 1); //set priority (for exti 10 - 15, priotity = 1
	NVIC_EnableIRQ(EXTI15_10_IRQn);//enable interrupt
}

//interrupt handling function from start-up
//startup_stm32l476rgtx.s
//EXTI15_10_IRQHandler
extern "C" void EXTI15_10_IRQHandler(void)
{
	//which interrupt: status registers in RM 14.5.6 Pending register
	//PIFx --> PIF13
	//rc_w1 means - read, clear with 1
	if (EXTI->PR1 & EXTI_PR1_PIF13)
	{
		EXTI->PR1 |= EXTI_PR1_PIF13; //cleared by '1'
		ld2.Toggle();
	}
}

//startup_stm32l476rgtx.s
extern "C" void USART2_IRQHandler(void)
{
	uart2.IRQ_Handler();
	/*
	 * there should be long, time consuming operations
	 * flag can be enabled (data is ready to send/receive)
	 * uart can rise interrupt when data is ready to receive
	 * then add to buffer
	 * when the sign is  '\0' it can be send
	 */
}


extern "C" void TIM3_IRQHandler(void)
{
	pwmTim3.InterruptHandler();
	channel1.InterruptHandler();
}

