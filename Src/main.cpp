/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "../Inc/Gpio.hpp"
#include "../Inc/Button.hpp"
#include "main.h"
#include <atomic>

std::atomic<uint32_t> Tick = 0;
void Delay(const uint32_t delay);

//drivers/cmsis/include/core_cm0plus////systick_config - method
//To Cortex system timer - in hal clock config

int main(void)
{
	//4MHz --> 1s = 4 000 000
	// 4000 000 / 1000
	SysTick_Config(4000);

	//C++style
	GpioOutput<GPIOA_BASE, 5> ld2;
	const Button<GPIOC_BASE, 13, OptionsPUPDR::None> userButton;

	while (true)
	{
		if (userButton.IsButtonPressed())
		{
			Delay(50);
			if (userButton.IsButtonPressed())
			{
				ld2.Toggle();
				//state machine would be better -- to check and learn
				// obj checking whether state changed - would be fine
				while(userButton.IsButtonPressed()) {}
			}
		}
	}
}


//interrupt handler
extern "C" void SysTick_Handler(void)
{
	//Tick += 1; for volatile, as volatile uint32_t tick; tick++ is deprecated for C++20/23
	Tick.fetch_add(1, std::memory_order_relaxed);
}


void Delay(const uint32_t delay)
{
	const uint32_t startTime = Tick.load(std::memory_order_relaxed);

	while(Tick.load(std::memory_order_relaxed) < startTime + delay)
	{
		//just wait
	}
}
